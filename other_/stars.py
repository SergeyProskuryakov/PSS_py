# Специальные возможности аргументов
# *   неограниченные позиционные аргументы (список)
# **  неограниченные именные аргументы (словарь)
# Распаковка


def many_args(a, b, c=0):
    print('a равно ', a)
    print('b равно ', b)
    print('c равно ', c)
    
many_args(1, 2, 3)
# позиционная передача аргументов. Или "по позиции"

many_args(b = 8, c = 5, a = 4, )
# передача по именам. В этом случае можно менять порядок


# неограниченные позиционные аргументы
def my_print(*all_we_need):
    print('Моя печать')
    for elem in all_we_need:
        print(elem)
    # к аргументу можно обращаться, как к списку: циклом, по индексам и т.д.
        

my_print()
my_print('большая', 'королевская')


# Неограниченные именные аргументы работают как словарь
def design(**params):
    print('Дизайн: ')
    for param in params:
        print(param, params[param])
        

design()
design(color='black')
design(font='Arial', color='white')

# 1. Написать функцию с одним обязательным (назовем его n) и многими необязательными позиционными аргументами
#    Вывести первые n аргументов из переданных
#    Если аргументов не хватило, вывести пустые строки


# 2. Написать функцию с неограниченным количеством именованных аргументов
#    вернуть словарь из тех, значения которых - строки. В виде словаря

def my_func (n, *arg):
    i = 0
    while i < n and i < len(arg):
        print(arg[i])
        i += 1
        
my_func(12, 2, 3, 4, 1, 5, 6)



# def my_func_2 (**n):
#     for i in n:
#         if i == str:
#             print(i)

# my_func_2('', 2, 1, 'sd', '3')